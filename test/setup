#!/bin/bash -x

# if in jenkins, make the venv from the workspace and build ID
# to allow concurrent runs.
if [[ "$CI" == "jenkins" ]]; then
    VENV=$WORKSPACE/venv
    USE_PRIVATE_IPS="true"
    virtualenv $VENV
    source $VENV/bin/activate
    pip install -U pip
    pip install -U -r requirements.txt
fi

source $(dirname $0)/common

USE_PRIVATE_IPS=${USE_PRIVATE_IPS:-"false"}

${ROOT}/test/check-deps

if $RUN_CLEANUP; then
  echo "deleting heat stack to destroy resources including VMs: ${VMS}"
  ${ROOT}/test/cleanup
fi

echo "testenv_instance_prefix: ${testenv_instance_prefix}"
echo "testenv_heat_stack_name: ${testenv_heat_stack_name}"

echo "create inventory directory"
rm -rf ${ROOT}/envs/test
mkdir -p ${ROOT}/envs/test

cp ${ROOT}/envs/example/defaults-2.0.yml ${ROOT}/envs/test/defaults-2.0.yml 
cat <<eof >> ${ROOT}/envs/test/defaults-2.0.yml 
testenv_instance_prefix: ${testenv_instance_prefix}
testenv_keypair_name: ${KEY_NAME}
testenv_keypair_path: ${KEY_PATH}
eof

cp -r ${ROOT}/envs/example/${TEST_ENV}/* ${ROOT}/envs/test
echo "creating heat template for test env if no heat_stack.yml in envs/test/..."
if [[ ! -e ${ROOT}/envs/test/heat_stack.yml ]]; then
  ursula --ursula-debug "envs/test" ${ROOT}/playbooks/${TEST_ENV}/tasks/create_heat_template.yml --extra-vars="use_private_ips=${USE_PRIVATE_IPS}"
fi


UNDERCLOUD_CIDR="$(python -c 'import shade; cloud = shade.openstack_cloud(); print cloud.search_subnets("internal")[0]["cidr"]')"
cat >> ${ROOT}/envs/test/defaults-2.0.yml <<eof
undercloud_cidr:
  - cidr: ${UNDERCLOUD_CIDR}
eof

cat >> ${ROOT}/envs/test/group_vars/all.yml <<eof
ursula_env_path: ${ROOT}/envs/test
eof

echo "booting ${VMS} by heat, then copy files for pre-deployment"
#sleep 30
extra_args="--ursula-debug --provisioner=heat --heat-stack-name=${testenv_heat_stack_name} --ursula-user=${LOGIN_USER} --heat-parameters ${EXTRA_HEAT_PARAMS}"
ursula ${extra_args} "envs/test" ${ROOT}/playbooks/${TEST_ENV}/tasks/pre-deploy.yml -u ${LOGIN_USER} "$@" -vvvv


if [[ ${TEST_ENV} == "ci-ceph_swift" || ${TEST_ENV} == "ci-ceph-swift-rhel" ]]; then
  echo "generating ring_definition.yml file for swift ..."
  swift_0_ip="$(private_ip ${testenv_instance_prefix}-swift-0)"
  swift_1_ip="$(private_ip ${testenv_instance_prefix}-swift-1)"
  swift_2_ip="$(private_ip ${testenv_instance_prefix}-swift-2)"
  cat > ${ROOT}/envs/test/ring_definition.yml <<eof
---
part_power: 13
replicas: 3
min_part_hours: 1
zones:
  z1:
    ${swift_0_ip}:
      disks:
        - vdb1
  z2:
    ${swift_1_ip}:
      disks:
        - vdb1
  z3:
    ${swift_2_ip}:
      disks:
        - vdb1
eof
fi

#workaround security group issue for defect 344951 and security rules can take effect after retouch securitygroup

secgroup=$(nova secgroup-list|grep ${SECURITYGROUP_NAME})
secgroup_id=$(echo ${secgroup}|awk '{print $2}')

nova secgroup-add-rule    ${secgroup_id} tcp 23 23 192.168.1.1/32
nova secgroup-delete-rule ${secgroup_id} tcp 23 23 192.168.1.1/32

ring_bell
echo "vms are up: ${VMS} !!"
